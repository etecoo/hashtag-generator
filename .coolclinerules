# CoolCline 運用ルール

## 1. 変更管理とGitHubプッシュのルール

### 1.1 変更完了時の確認事項
1. ドキュメントの更新確認
   - CHANGELOG.md
   - ADR.md（技術的決定の場合）
   - ISSUES.md（問題解決の場合）
   - その他関連ドキュメント

2. テストと動作確認
   - 実装した機能のテスト
   - エラーケースの確認
   - ログ出力の確認

3. コードレビュー
   - 実装の一貫性
   - エラーハンドリング
   - セキュリティ考慮事項

### 1.2 GitHubプッシュ手順
1. 変更内容の確認
   ```bash
   git status
   git diff
   ```

2. 変更のステージング
   ```bash
   git add .
   ```

3. コミット
   ```bash
   git commit -m "type: description"
   ```
   - type: feat, fix, docs, style, refactor, test, chore
   - description: 変更内容の簡潔な説明

4. プッシュ
   ```bash
   git push origin main
   ```

### 1.3 自動プッシュルール
- 以下の変更完了時は自動的にGitHubへプッシュする：
  * バグ修正完了時
  * 新機能実装完了時
  * ドキュメント更新完了時
  * 設定変更完了時
  * 問題解決完了時

### 1.4 コミットメッセージ規約
- 形式: `type: description`
- タイプ:
  * feat: 新機能
  * fix: バグ修正
  * docs: ドキュメント
  * style: フォーマット
  * refactor: リファクタリング
  * test: テスト
  * chore: その他

### 1.5 ブランチ戦略
- 機能開発: feature/
- バグ修正: fix/
- ドキュメント: docs/
- リファクタリング: refactor/

## 2. エラー発生時の対応

### 2.1 エラー記録
- ISSUES.mdに記録
- 再現手順の記載
- 解決策の文書化

### 2.2 デバッグ手順
1. ログの確認
2. エラーメッセージの分析
3. 該当コードの確認
4. 修正案の作成

## 3. ドキュメント管理

### 3.1 更新タイミング
- 機能追加時
- バグ修正時
- 設定変更時
- アーキテクチャ変更時

### 3.2 必須ドキュメント
- CHANGELOG.md
- ADR.md
- ISSUES.md
- 00-CORE.md