# Context Preservation Rules

## 1. プロジェクト初期化ルール

### 1.1 新規プロジェクトの初期化
新規プロジェクト検出時、以下のドキュメント構造を自動生成：
```
docs/
├── project-context/
│   └── 00-CORE.md        # プロジェクト構造と重要な設定
├── technical-decisions/
│   ├── ADR.md            # アーキテクチャ決定記録
│   └── DESIGN.md         # 設計文書
└── work-history/
    ├── CHANGELOG.md      # 変更履歴
    └── ISSUES.md         # 問題と解決策の記録
```

### 1.2 既存プロジェクトの分析と構造化
既存プロジェクトを開いた際の自動処理：

1. **プロジェクト分析**
   - 既存のディレクトリ構造の確認
   - 不足しているドキュメントの特定
   - 既存のドキュメントがある場合はその構造を維持

2. **履歴情報の抽出**
   - Gitコミット履歴からの変更情報抽出
   - 既存のIssueやPRからの問題解決履歴抽出
   - プロジェクトの重要なマイルストーン特定

3. **ドキュメント構造の段階的構築**
   - 不足しているディレクトリの作成
   - 必要なドキュメントファイルの生成
   - 既存の情報の適切な配置

4. **既存情報の統合**
   - コミット履歴からCHANGELOG.mdの初期内容生成
   - Issue/PR履歴からISSUES.mdの初期内容生成
   - プロジェクト構造からCORE.mdの初期内容生成

### 1.3 初期ドキュメントテンプレート
- 00-CORE.md: プロジェクト概要、構造、依存関係
- CHANGELOG.md: セマンティックバージョニングに基づく変更記録
- ISSUES.md: 問題追跡と解決プロセスの記録
- ADR.md: アーキテクチャ決定の記録
- DESIGN.md: システム設計の詳細
- context-flow.md: プロセスフローの視覚化

## 2. 文脈保持の基本方針
- トークン消費を最小限に抑制すること
- 文脈の継続的な保持を重視すること
- エラー解決プロセスを詳細に記録すること
- プロジェクト構造の情報はCORE.mdに集約すること
  * ディレクトリ構造と役割
  * 重要なファイルの説明
  * 依存関係の概要
  * ドキュメント管理方針

## 3. ドキュメント更新ルール

### 3.1 CORE.md
- 更新タイミング
  * プロジェクト構造の変更時
  * 重要なファイルの追加・削除時
  * 依存関係の変更時
  * ドキュメント管理方針の変更時

### 3.2 CHANGELOG.md
- 以下の変更を必ず記録すること
  * アーキテクチャの変更
  * 主要なバグ修正の影響範囲
  * 設定変更の背景
- 記録項目
  * 変更の背景と理由
  * ビジネスインパクト
  * 技術的な判断根拠
- Source Control連携
  * 関連するPR番号を記載 (例: PR #123)
  * 重要なコミットハッシュを記録
  * 関連するIssue番号への参照
  * 大規模な変更の場合はブランチ名も記録

### 3.3 ISSUES.md
- エラー情報の記録
  * エラーメッセージ全文
  * 環境情報
  * スタックトレース
- 解決プロセスの記録
  * 試行錯誤の過程
  * 最終的な解決策
  * 検証結果
  * 再発防止策
- Source Control連携
  * Issue Branchの名前を記録
  * 各試行段階のコミットハッシュを記録
  * 最終解決のPR番号を記載
  * 関連する一連のコミット履歴を明記

### 3.4 context-flow.md
- プロセスフローの視覚化
  * プロジェクト初期化フロー
  * エラー解決フロー
  * ドキュメント更新フロー
  * 文脈保持の相互関係
  * Source Control連携フロー
- 更新タイミング
  * ドキュメント管理プロセスの変更時
  * 新しいフローの追加時
  * 既存フローの修正時
- 図の保守
  * マーメイド記法の一貫性維持
  * フロー間の関係性の明確化
  * 視覚的な分かりやすさの確保

## 4. エラー解決手順

1. **エラーの評価**
   - 重要度の判断（影響範囲、ビジネスへの影響）
   - 緊急度の判断（即時対応の必要性）
   - 優先順位の決定

2. **問題の分解**
   - 問題を小さな単位に分解する
   - 各単位を順番に解決し、解決ごとに検証を行う

3. **解決策の説明**
   - 現在の挙動を明確にする
   - 望ましい挙動を定義する
   - 両者のギャップを埋めるための手順を説明する

4. **エラー原因の仮説**
   - エラーの原因について仮説を立てる
   - 仮説に基づいた修正を実施し、テストを行う
   - 予期しない結果が出た場合は分析し、仮説を修正して繰り返す

5. **解決と検証**
   - 解決策を実装する
   - テストにより検証する
   - 必要に応じて手順2-4を繰り返す

6. **文書化と共有**
   - ISSUES.mdに解決プロセスを記録
   - 必要に応じてCORE.mdを更新
   - 再発防止策を文書化

## 5. Source Control連携のベストプラクティス

### 5.1 コミット参照の記録方法
- コミットハッシュは短縮形を使用 (例: 1a2b3c4)
- PRは#記号付きで参照 (例: PR #123)
- Issueは#記号付きで参照 (例: Issue #456)
- ブランチ名はバッククォートで囲む (例: `feature/new-feature`)

### 5.2 変更履歴の追跡
- 重要な変更は必ずPRとIssueを紐付ける
- 試行錯誤の過程も含めて各段階のコミットを記録
- 関連する一連の変更をグループ化して記録

### 5.3 参照優先順位
1. ISSUES.md（類似エラーの検索）
2. CORE.md（システム構造の確認）
3. 環境設定（関連設定の確認）

### 5.4 通常時の参照順序
1. CORE.md（最新のシステム状態）
2. 設計判断（アーキテクチャの意図）
3. context-flow.md（プロセスの確認）